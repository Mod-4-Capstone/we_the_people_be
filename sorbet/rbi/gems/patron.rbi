# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/patron/all/patron.rbi
#
# patron-0.13.3

module Patron
  def libcurl_version; end
  def libcurl_version_exact; end
  def self.libcurl_version; end
  def self.libcurl_version_exact; end
  def self.user_agent_string; end
  def self.version; end
end
class Patron::Error < StandardError
end
class Patron::UnsupportedProtocol < Patron::Error
end
class Patron::UnsupportedSSLVersion < Patron::Error
end
class Patron::UnsupportedHTTPVersion < Patron::Error
end
class Patron::URLFormatError < Patron::Error
end
class Patron::HostResolutionError < Patron::Error
end
class Patron::ConnectionFailed < Patron::Error
end
class Patron::PartialFileError < Patron::Error
end
class Patron::TimeoutError < Patron::Error
end
class Patron::TooManyRedirects < Patron::Error
end
class Patron::Aborted < Patron::Error
end
class Patron::HeaderCharsetInvalid < Patron::Error
end
class Patron::NonRepresentableBody < Patron::HeaderCharsetInvalid
end
module Patron::Util
  def build_query_pairs_from_hash(hash, escape_values = nil); end
  def build_query_string_from_hash(hash, escape_values = nil); end
  extend Patron::Util
end
class Patron::Request
  def ==(request); end
  def action; end
  def action=(action); end
  def action_name; end
  def auth_type; end
  def auth_type=(type = nil); end
  def automatic_content_encoding; end
  def automatic_content_encoding=(arg0); end
  def buffer_size; end
  def buffer_size=(buffer_size); end
  def cacert; end
  def cacert=(arg0); end
  def connect_timeout; end
  def connect_timeout=(new_timeout); end
  def credentials; end
  def dns_cache_timeout; end
  def dns_cache_timeout=(arg0); end
  def download_byte_limit; end
  def download_byte_limit=(arg0); end
  def eql?(request); end
  def file_name; end
  def file_name=(arg0); end
  def force_ipv4; end
  def force_ipv4=(arg0); end
  def headers; end
  def headers=(new_headers); end
  def http_version; end
  def http_version=(arg0); end
  def ignore_content_length; end
  def ignore_content_length=(arg0); end
  def initialize; end
  def insecure; end
  def insecure=(arg0); end
  def low_speed_limit; end
  def low_speed_limit=(arg0); end
  def low_speed_time; end
  def low_speed_time=(arg0); end
  def marshal_dump; end
  def marshal_load(data); end
  def max_redirects; end
  def max_redirects=(new_max_redirects); end
  def multipart; end
  def multipart=(arg0); end
  def password; end
  def password=(arg0); end
  def progress_callback; end
  def progress_callback=(arg0); end
  def proxy; end
  def proxy=(arg0); end
  def proxy_type; end
  def proxy_type=(arg0); end
  def ssl_version; end
  def ssl_version=(arg0); end
  def timeout; end
  def timeout=(new_timeout); end
  def upload_data; end
  def upload_data=(data); end
  def url; end
  def url=(arg0); end
  def username; end
  def username=(arg0); end
end
module Patron::ResponseDecoding
  def charset_from_content_type; end
  def convert_encoding_and_raise(str); end
  def decode_body(strict); end
  def decode_header_data(str); end
  def encoding_from_headers_or_binary; end
  def internal_encoding; end
end
class Patron::Response
  def body; end
  def body_decodable?; end
  def charset; end
  def decoded_body; end
  def error?; end
  def headers; end
  def initialize(url, status, redirect_count, raw_header_data, body, default_charset = nil); end
  def inspect; end
  def inspectable_body; end
  def ok?; end
  def parse_headers(header_data_for_multiple_responses); end
  def redirect_count; end
  def status; end
  def status_line; end
  def url; end
  include Patron::ResponseDecoding
end
class Patron::Session
  def add_cookie_file(arg0); end
  def auth_type; end
  def auth_type=(arg0); end
  def automatic_content_encoding; end
  def automatic_content_encoding=(arg0); end
  def base_url; end
  def base_url=(arg0); end
  def buffer_size; end
  def buffer_size=(arg0); end
  def build_request(action, url, headers, options = nil); end
  def cacert; end
  def cacert=(arg0); end
  def connect_timeout; end
  def connect_timeout=(arg0); end
  def copy(url, dest, headers = nil); end
  def default_response_charset; end
  def default_response_charset=(arg0); end
  def delete(url, headers = nil); end
  def dns_cache_timeout; end
  def dns_cache_timeout=(arg0); end
  def download_byte_limit; end
  def download_byte_limit=(arg0); end
  def enable_debug(file = nil); end
  def escape(arg0); end
  def force_ipv4; end
  def force_ipv4=(arg0); end
  def get(url, headers = nil); end
  def get_file(url, filename, headers = nil); end
  def handle_cookies(file_path = nil); end
  def handle_request(arg0); end
  def head(url, headers = nil); end
  def headers; end
  def headers=(arg0); end
  def http_version; end
  def http_version=(arg0); end
  def ignore_content_length; end
  def ignore_content_length=(arg0); end
  def initialize(args = nil, &block); end
  def insecure; end
  def insecure=(arg0); end
  def interrupt; end
  def low_speed_limit; end
  def low_speed_limit=(arg0); end
  def low_speed_time; end
  def low_speed_time=(arg0); end
  def max_redirects; end
  def max_redirects=(arg0); end
  def password; end
  def password=(arg0); end
  def patch(url, data, headers = nil); end
  def post(url, data, headers = nil); end
  def post_file(url, filename, headers = nil); end
  def post_multipart(url, data, filename, headers = nil); end
  def progress_callback; end
  def progress_callback=(arg0); end
  def proxy; end
  def proxy=(arg0); end
  def proxy_type; end
  def proxy_type=(arg0); end
  def put(url, data, headers = nil); end
  def put_file(url, filename, headers = nil); end
  def request(action, url, headers, options = nil); end
  def reset; end
  def response_class; end
  def self.escape(arg0); end
  def self.unescape(arg0); end
  def set_debug_file(arg0); end
  def ssl_version; end
  def ssl_version=(arg0); end
  def timeout; end
  def timeout=(arg0); end
  def unescape(arg0); end
  def urldecode(arg0); end
  def urlencode(arg0); end
  def username; end
  def username=(arg0); end
end
module Patron::HeaderParser
  def self.parse(string_of_headers_from_multiple_responses_in_sequence); end
end
class Anonymous_Struct_33 < Struct
  def headers; end
  def headers=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def status_line; end
  def status_line=(_); end
end
class Patron::HeaderParser::SingleResponseHeaders < Anonymous_Struct_33
end
