# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: ignore
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/jsonapi-serializer/all/jsonapi-serializer.rbi
#
# jsonapi-serializer-2.2.0

module JSONAPI
end
module JSONAPI::Serializer
  def self.included(base); end
end
class JSONAPI::Serializer::Error < StandardError
end
class JSONAPI::Serializer::UnsupportedIncludeError < JSONAPI::Serializer::Error
  def include_item; end
  def initialize(include_item, klass); end
  def klass; end
  def message; end
end
module FastJsonapi
  def self.call_proc(proc, *params); end
end
class FastJsonapi::Scalar
  def conditional_proc; end
  def conditionally_allowed?(record, serialization_params); end
  def initialize(key:, method:, options: nil); end
  def key; end
  def method; end
  def serialize(record, serialization_params, output_hash); end
end
class FastJsonapi::Attribute < FastJsonapi::Scalar
end
class FastJsonapi::Relationship
  def add_links_hash(record, params, output_hash); end
  def add_meta_hash(record, params, output_hash); end
  def cached; end
  def compute_static_record_type; end
  def compute_static_serializer; end
  def conditional_proc; end
  def fetch_associated_object(record, params); end
  def fetch_id(record, params); end
  def id_hash(id, record_type, default_return = nil); end
  def id_hash_from_record(record, params); end
  def id_method_name; end
  def ids_hash(ids, record_type); end
  def ids_hash_from_record_and_relationship(record, params = nil); end
  def include_relationship?(record, serialization_params); end
  def initialize(owner:, key:, name:, id_method_name:, record_type:, object_method_name:, object_block:, serializer:, relationship_type:, polymorphic:, conditional_proc:, transform_method:, links:, meta:, cached: nil, lazy_load_data: nil); end
  def initialize_static_serializer; end
  def key; end
  def lazy_load_data; end
  def links; end
  def meta; end
  def name; end
  def object_block; end
  def object_method_name; end
  def owner; end
  def polymorphic; end
  def record_type; end
  def record_type_for(record, serialization_params); end
  def relationship_type; end
  def run_key_transform(input); end
  def serialize(record, included, serialization_params, output_hash); end
  def serializer; end
  def serializer_for(record, serialization_params); end
  def serializer_for_name(name); end
  def static_record_type; end
  def static_serializer; end
  def transform_method; end
end
class FastJsonapi::Link < FastJsonapi::Scalar
end
class FastJsonapi::MandatoryField < StandardError
end
module FastJsonapi::SerializationCore
  extend ActiveSupport::Concern
end
module FastJsonapi::SerializationCore::ClassMethods
  def attributes_hash(record, fieldset = nil, params = nil); end
  def get_included_records(record, includes_list, known_included_objects, fieldsets, params = nil); end
  def id_from_record(record, params); end
  def id_hash(id, record_type, default_return = nil); end
  def links_hash(record, params = nil); end
  def meta_hash(record, params = nil); end
  def parse_includes_list(includes_list); end
  def record_cache_options(options, fieldset, includes_list, params); end
  def record_hash(record, fieldset, includes_list, params = nil); end
  def relationships_hash(record, relationships = nil, fieldset = nil, includes_list = nil, params = nil); end
end
module FastJsonapi::ObjectSerializer
  def deep_symbolize(collection); end
  def hash_for_collection; end
  def hash_for_one_record; end
  def initialize(resource, options = nil); end
  def process_options(options); end
  def serializable_hash; end
  def to_hash; end
  extend ActiveSupport::Concern
  include FastJsonapi::SerializationCore
end
module FastJsonapi::ObjectSerializer::ClassMethods
  def add_relationship(relationship); end
  def attribute(*attributes_list, &block); end
  def attributes(*attributes_list, &block); end
  def belongs_to(relationship_name, options = nil, &block); end
  def cache_options(cache_options); end
  def compute_id_method_name(custom_id_method_name, id_method_name_from_relationship, polymorphic, serializer, block); end
  def create_relationship(base_key, relationship_type, options, block); end
  def deprecated_cache_options(cache_options); end
  def fetch_polymorphic_option(options); end
  def has_many(relationship_name, options = nil, &block); end
  def has_one(relationship_name, options = nil, &block); end
  def inherited(subclass); end
  def is_collection?(resource, force_is_collection = nil); end
  def link(*params, &block); end
  def meta(meta_name = nil, &block); end
  def reflected_record_type; end
  def run_key_transform(input); end
  def serializer_for(name); end
  def set_id(id_name = nil, &block); end
  def set_key_transform(transform_name); end
  def set_type(type_name); end
  def use_hyphen; end
  def validate_includes!(includes); end
end
class Railtie < Rails::Railtie
end
class ActiveRecord::Associations::Builder::HasOne < ActiveRecord::Associations::Builder::SingularAssociation
  def self.define_accessors(mixin, reflection); end
end
